"""
This code was generated by a tool. Don't modify it manually.
http://sqldalmaker.sourceforge.net
"""

from dal.group import Group
from dal.group_li import GroupLI


class GroupsTestDao:

    def __init__(self, ds):
        self.ds = ds

    def create_group(self, p):
        """
        (C)RUD: groups
        Generated values are passed to DTO.
        @type p: Group
        @rtype: None
        @raise: Exception if no rows inserted.
        """
        sql = """insert into groups (g_name, g_comments) values (?, ?)"""
        _ai_values = [["g_id", None]]
        self.ds.insert_row(sql, [p.g_name, p.g_comments], _ai_values)
        p.g_id = _ai_values[0][1]

    def read_group_list(self):
        """
        C(R)UD: groups
        @rtype: list[Group]
        """
        sql = """select * from groups"""
        _res = []

        def _map_cb(row):
            _obj = Group()
            _obj.g_id = row["g_id"]  # t <- t
            _obj.g_name = row["g_name"]  # t <- t
            _obj.g_comments = row["g_comments"]  # t <- t
            _res.append(_obj)

        self.ds.query_all_rows(sql, [], _map_cb)
        return _res

    def read_group(self, g_id, obj):
        """
        C(R)UD: groups
        @type g_id: int
        @type obj: Group
        @rtype: None
        @raise: Exception if amount of returned rows != 1.
        """
        sql = """select * from groups where g_id=?"""
        row = self.ds.query_row(sql, [g_id])
        obj.g_id = row["g_id"]  # t <- t
        obj.g_name = row["g_name"]  # t <- t
        obj.g_comments = row["g_comments"]  # t <- t

    def update_group(self, p):
        """
        CR(U)D: groups
        @type p: Group
        @rtype: int (the number of affected rows)
        """
        sql = """update groups set g_name=?, g_comments=? where g_id=?"""
        return self.ds.exec_dml(sql, [p.g_name, p.g_comments, p.g_id])

    def delete_group(self, g_id):
        """
        CRU(D): groups
        @type g_id: int
        @rtype: int (the number of affected rows)
        """
        sql = """delete from groups where g_id=?"""
        return self.ds.exec_dml(sql, [g_id])

    def get_groups(self):
        """
        @rtype: list[GroupLI]
        """
        sql = """select g.*,  
                (select count(*) from tasks where g_id=g.g_id) as g_tasks_count 
                from groups g 
                order by g.g_id"""
        _res = []

        def _map_cb(row):
            _obj = GroupLI()
            _obj.g_id = row["g_id"]  # q <- q
            _obj.g_name = row["g_name"]  # q <- q
            _obj.g_comments = row["g_comments"]  # q <- q
            _obj.g_tasks_count = row["g_tasks_count"]  # q <- q
            _res.append(_obj)

        self.ds.query_all_rows(sql, [], _map_cb)
        return _res
